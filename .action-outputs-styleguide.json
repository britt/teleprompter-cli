{
  "style-guide": "# Documentation Style Guide\n\n## Project Summary\n\nteleprompter-cli is a TypeScript-based command-line tool project (CLI) that appears to provide teleprompter-style functionality. The codebase uses Ink (React for CLIs) and TypeScript (declarations are present in the types/ directory). The repository contains two major code areas: a top-level project with README and tests and a teleprompter-cli-v2 implementation under teleprompter-cli-v2/source which implements CLI commands as .tsx modules (commands: list, push, rollback, import, export, get, versions). Purpose and audience\n- Primary audience: developers who will maintain or extend the CLI and authors who will write and maintain the documentation for the CLI. Secondary audience: advanced users seeking usage examples. Content types present and expected\n- README overview pages (root README.md, teleprompter-cli-v2/readme.md)\n- Command-level guides / command reference pages (one page per command under teleprompter-cli-v2/source/commands)\n- Code examples and inline usage examples (many .tsx command modules likely contain usage examples or help text)\n- Tests and sample tests under src/__tests__ and ink-cli/__tests__ (useful for reproduction examples)\n- No explicit API reference pages were found (TypeDoc is the publishing system but no generated API docs are present in the repository)\nTechnical complexity and tone\n- Complexity: moderate. Project uses TypeScript, Ink, and a typical CLI command layout. Documentation should assume readers understand JavaScript/TypeScript and basic CLI concepts.\n- Tone: Technical, concise, example-driven.\nObserved writing patterns and conventions\n- Markdown is used for top-level documentation (README.md and teleprompter-cli-v2/readme.md). No front matter or metadata is present in existing files.\n- Tests and examples are used as living documentation (tests in __tests__ act as usage examples).\n- No table of contents or metadata has been applied; command documentation is likely best organized as one page per command mirroring the source directory structure.\n\n## Context\n\n**Project:** teleprompter-cli\n**Description:** No description available\n**Publishing System:** TypeDoc\n\n## Primary Documentation Goals\n\n## Writing Rules\n\n### Core Principles\n- **Be concise** - Use the minimum words necessary\n- **Be practical** - Focus on actionable information\n- **Be example-driven** - Show working code for every concept\n- **Be consistent** - Match existing documentation patterns\n\n### Tone Guidelines\n\n#### Default Tone (Technical Users)\n- Direct and practical language\n- Assume familiarity with TypeScript, package managers, CLI\n- Use technical jargon and shorthand\n- Focus on code examples over explanations\n- Avoid marketing language or benefit statements\n\n#### Non-Technical User Adjustments\nWhen explicitly writing for non-technical users:\n- Explain what each command does and why\n- Spell out abbreviations and technical terms\n- Provide simpler code examples with explanations\n- Include more step-by-step guidance\n- Link to additional learning resources\n\n### Publishing System Requirements\nOverview and purpose\n- Publishing system: TypeDoc (TypeDoc is suited to generate API reference from TypeScript comments). The repository currently lacks TypeDoc output. Use TypeDoc to generate API pages for exported types and functions and complement that with hand-written Markdown files for higher-level CLI docs (command guides, usage examples). Required practice\n- All Markdown documentation files that will be consumed by the site generator (TypeDoc output or the static site surrounding TypeDoc content) must include a consistent front-matter block (see template below). Even though the current repository contains no front matter, adopting a minimal YAML front matter improves integration with static site tools and helps generate consistent sidebars and search metadata.\nTypeDoc-specific guidance\n- TypeDoc will extract documentation from exported symbols and JSDoc/TSDoc comments in .ts/.tsx files. Keep public APIs documented with TSDoc style comments. For CLI command modules implemented as Ink components, add TSDoc comments describing the component purpose, exported helpers, and include @example tags to show usage.\n- Treat TypeDoc-generated pages as authoritative for low-level API references. Add top-level, human-focused Markdown pages for: overview, installation, quickstart, each command reference, troubleshooting, and migration notes (if a v2 exists).\nFront matter (exact template)\n- Use this YAML front matter at the top of any Markdown page that will be published. Required fields are listed below and the exact template is:\n---\n# REQUIRED front matter template for teleprompter-cli docs\ntitle: \"REPLACE_WITH_PAGE_TITLE\"\ndescription: \"Short one-line description of the page for search and previews\"\nslug: \"/REPLACE_WITH_SLUG\" # absolute path starting at docs root, must be unique\nsidebar_label: \"REPLACE_WITH_LABEL\" # what appears in the sidebar\nsidebar_position: REPLACE_WITH_INTEGER # nu",
  "style-guide-path": "/home/runner/work/teleprompter-cli/teleprompter-cli/.doc.holiday/styleguide.md",
  "summary": "Style guide generated from 24 files with 25 sections covering documentation patterns and conventions."
}