{
  "style-guide": "# Documentation Style Guide\n\n## Project Summary\n\nteleprompter-cli is a TypeScript-based command-line tool project that implements an interactive teleprompter experience. The repository contains two major areas: a modern rewritten v2 implementation (teleprompter-cli-v2) built with Ink (React for CLIs) and an older CLI integration (ink-cli). Source files are TypeScript/TSX and tests are present (Jest/Ink testing library). The project goal is to provide a polished CLI teleprompter with commands implemented under teleprompter-cli-v2/source/commands, utilities and a top-level CLI/app entry points. The codebase is intended for developers who will maintain or extend the CLI and authors who must write user-facing documentation (usage guides, command references, examples). The technical level is moderate to advanced — readers should be comfortable with Node.js, TypeScript, CLIs, and Ink components.\n\n## Context\n\n**Project:** teleprompter-cli\n**Description:** No description available\n**Publishing System:** TypeDoc\n\n## Primary Documentation Goals\n\n## Writing Rules\n\n### Core Principles\n- **Be concise** - Use the minimum words necessary\n- **Be practical** - Focus on actionable information\n- **Be example-driven** - Show working code for every concept\n- **Be consistent** - Match existing documentation patterns\n\n### Tone Guidelines\n\n#### Default Tone (Technical Users)\n- Direct and practical language\n- Assume familiarity with TypeScript, package managers, CLI\n- Use technical jargon and shorthand\n- Focus on code examples over explanations\n- Avoid marketing language or benefit statements\n\n#### Non-Technical User Adjustments\nWhen explicitly writing for non-technical users:\n- Explain what each command does and why\n- Spell out abbreviations and technical terms\n- Provide simpler code examples with explanations\n- Include more step-by-step guidance\n- Link to additional learning resources\n\n### Publishing System Requirements\nContext: TypeDoc is the publishing system for API/typed documentation. The repository currently contains no front-matter metadata in markdown pages, and no unified typedoc configuration file was found in the provided listing. The following instructions and templates describe how to publish consistent docs alongside TypeDoc output and how to configure TypeDoc to integrate project markdown.\n\n1) TypeDoc configuration (typedoc.json) — place at repository root:\n```\n{\n  \"entryPoints\": [\"src/index.ts\"],\n  \"out\": \"docs/api\",\n  \"plugin\": [\"typedoc-plugin-markdown\"],\n  \"hideGenerator\": true,\n  \"gitRevision\": \"main\",\n  \"readme\": \"README.md\",\n  \"includes\": \"docs/includes\"\n}\n```\n- Explanation: typedoc-plugin-markdown produces markdown files; \"includes\" lets you include hand-authored markdown that will be copied/processed.\n\n2) Front matter usage for hand-authored docs (recommended). Although TypeDoc output will generate API pages, site pages (user guides, CLI reference) should include front matter to enable a static site generator or custom page renderer to pick up metadata. Use this exact front matter template for every hand-authored page (save as top of .md files under docs/ or teleprompter-cli-v2/readme.md etc):\n```\n---\ntitle: \"{Short Title — single line}\"\ndescription: \"{One-line summary (max 140 chars)}\"\nsidebar_label: \"{Label shown in sidebar — short}\"\nslug: \"/{path/from/site-root/without-trailing-slash}\"\ndraft: false\ntags: [teleprompter, cli, usage]\n---\n```\n- Required fields (project standard): title, description, sidebar_label, slug, draft.\n- Optional but recommended: tags, aliases (if migrating old pages), redirect_from.\n\n3) Front matter for TypeDoc-generated markdown pages (typedoc-plugin-markdown supports front matter). When generating docs with the plugin, enable front-matter insertion or post-process the generated files to add the following template at the top of each generated page (example for a module):\n```\n---\ntitle: \"Module: myModule\"\ndescription: \"API reference for myModule\"\nsidebar_label: \"myModule\"\nslug: \"/api/myModule\"\ndraft: false\n---\n```\n- Required fields for generated API pages: title, description, sidebar_label, slug, draft.\n\n4) Code block and example formatting rules to ensure TypeDoc and markdown renderers parse consistently:\n- Use fenced code blocks with language markers. Examples:\n  - Bash CLI example: ```bash\n  - TypeScript code example: ```ts\n  - JSX/TSX examples for Ink components: ```tsx\n- For short inline commands, use single backticks: `teleprompter start --speed 1.5`.\n\n5) Required configuration files in repo to support publishing:\n- typedoc.json (as above)\n- README.md at project root (top-level introduction) — must have an H1 title line (exact single H1 per file)\n- docs/ (or docs/includes) folder for hand-authored markdown used alongside generated API docs\n\n6) Example process to build docs:\n- npm install --save-dev typedoc typedoc-plugin-markdown\n- npx typedoc\n- Post-process: add front-matter to generated API md (if plugin does not add it automatically) using a script or templating tool\n\n### ",
  "style-guide-path": "/home/runner/work/teleprompter-cli/teleprompter-cli/.doc.holiday/styleguide.md",
  "summary": "Style guide generated from 24 files with 18 sections covering documentation patterns and conventions."
}