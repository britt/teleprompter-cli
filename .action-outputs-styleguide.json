{
  "style-guide": "# Documentation Style Guide\n\n## Project Summary\n\nProject: teleprompter-cli\n\nPurpose and audience\n- teleprompter-cli is a TypeScript/Ink-based command-line application (CLI) repository. It provides CLI commands implemented under teleprompter-cli-v2/source/commands and an Ink-based interactive UI under ink-cli. The documentation should serve two primary audiences:\n  - End users/operators who need concise CLI usage, examples, and command reference.\n  - Developer contributors who need implementation details, tests, and API surface (TypeDoc-generated) for maintaining and extending the CLI.\n\nContent types present (in this repo)\n- End-user guides and CLI reference (command files under teleprompter-cli-v2/source/commands).\n- Implementation / developer documentation (src, ink-cli, types folders and TypeScript source).\n- Examples: sample tests and small code snippets exist (test files under src/__tests__ and ink-cli/__tests__).\n- Automated API docs: TypeDoc is listed as the publishing system; API reference should be generated from JSDoc/TSDoc comments in TypeScript source.\n\nTechnical complexity level\n- Intermediate: developers must be comfortable with TypeScript, Ink (React for CLIs), Jest/tsx testing, and TypeDoc usage. Documentation must include command usage, options, examples, and developer-level notes for building, testing, and contributing.\n\nObserved writing patterns and conventions\n- Minimal front-matter / metadata present (Metadata Analysis: none). Documentation currently relies primarily on Markdown files (README.md and readme.md under teleprompter-cli-v2). No table of contents or explicit metadata fields observed.\n- Examples and code appear inline in command and test files; the repo mixes runnable examples (CLI usage) with implementation details.\n\nKey implications for style guide\n- Because TypeDoc is used for API docs, documentation must be structured to connect narrative content (README, command guides) with generated API pages (TypeDoc output). Add a lightweight front matter convention for any markdown pages that are intended to be part of a docs site so that navigation and linking are consistent.\n- Make CLI usage very prominent: Usage, Examples, Options, Commands, Exit codes.\n\nPattern extraction (selected explicit patterns / recommendations)\n- Heading patterns (exact examples to follow):\n  - H1 (per file): \"# teleprompter-cli\" or \"# Command: list\" (single top-level title)\n  - H2: \"## Overview\", \"## Usage\", \"## Examples\", \"## Options\", \"## Commands\", \"## Installation\", \"## Contributing\"\n  - H3: \"### Example: Stream a file to the teleprompter\", \"### Options (global)\", \"### Troubleshooting\"\n  - H4 (rare): \"#### Example invocation with environment variables\"\n- Link formatting patterns (exact examples):\n  - Internal doc link (absolute site root): [Commands](/commands)\n  - Internal doc link (relative): [List command](teleprompter-cli-v2/source/commands/list.tsx)\n  - External link: [Node.js](https://nodejs.org/)\n  - Link to TypeDoc API entry: [Teleprompter class](/api/classes/Teleprompter.html)\n- Front matter fields (recommended exact field names and formatting): none currently present in repo; adopt the template below (YAML front matter) for pages that will be rendered in a site that consumes front matter (e.g., static site generator wrapping TypeDoc output).\n  - Required metadata fields (recommended): title, description, slug, sidebar_label, hide_title (optional boolean), toc (optional boolean), api (optional boolean to signal links to TypeDoc pages).\n  - Optional fields: position (for sidebar ordering), keywords, redirects.\n- Directory organization patterns (exact mapping based on repository layout):\n  - Root README.md: project overview and quickstart.\n  - teleprompter-cli-v2/source: narrative docs for the v2 CLI implementation (cli.tsx, app.tsx, util.tsx).\n  - teleprompter-cli-v2/source/commands: one file per command; each file should contain a doc-friendly header block and example usage.\n  - ink-cli: Ink component entry points and interactive CLI docs.\n  - src: core library logic; TypeDoc should be generated from these files (index.ts and subfolders).\n  - types: hand-written or distributed type declarations; include a small explanation page for consumers if needed.\n  - __tests__ folders: keep tests as examples; extract working usage examples into an examples/ directory if longer snippets are needed.\n\nOverall summary conclusion\n- The repository mixes user-facing CLI command implementations and developer-focused TypeScript code. Documentation should be split between narrative user guides (commands, usage, examples) and machine-generated API reference (via TypeDoc). Adopt a small, consistent front-matter convention to help generate navigation and to connect narrative docs to the TypeDoc output. Use a strict heading and link strategy so both users and contributors reliably find what they need.\n\n## Context\n\n**Project:** teleprompter-cli\n**Description:** No description available\n**Publishing System:** TypeDoc\n\n#",
  "style-guide-path": "/home/runner/work/teleprompter-cli/teleprompter-cli/.doc.holiday/styleguide.md",
  "summary": "Style guide generated from 24 files with 20 sections covering documentation patterns and conventions."
}